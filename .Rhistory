consumer_secret <- "3rOsAGnEVXQulSUHTAcz0Zelbrca"
token <- gerar_token(consumer_key, consumer_secret)
# -------------------------------
# Buscar produtos por cultura (rota correta)
# -------------------------------
buscar_produtos_cultura <- function(cultura, token) {
base_url <- "https://api.cnptia.embrapa.br/agrofit/v1/search/produtos-formulados"
pagina <- 1
todos <- list()
repeat {
res <- GET(
url = base_url,
query = list(cultura = cultura, page = pagina),
add_headers(Authorization = paste("Bearer", token))
)
stop_for_status(res)
dados <- content(res, as = "text", encoding = "UTF-8") %>% fromJSON(flatten = TRUE)
if(length(dados$content) == 0) break
todos <- append(todos, list(as_tibble(dados$content)))
if(nrow(as_tibble(dados$content)) < 100) break
pagina <- pagina + 1
}
df <- bind_rows(todos)
# Expandir indicacaoUso e culturas
if("indicacao_uso" %in% colnames(df)) {
df <- df %>%
mutate(indicacao_uso = map(indicacao_uso, ~ if(is.null(.x)) tibble() else as_tibble(.x))) %>%
unnest(indicacao_uso, keep_empty = TRUE) %>%
mutate(culturas = map(culturas, ~ if(is.null(.x)) tibble() else as_tibble(.x))) %>%
unnest(culturas, keep_empty = TRUE)
}
df
}
# -------------------------------
# Teste: Melão
# -------------------------------
produtos_melao <- buscar_produtos_cultura("Melão", token)
cat("Total de produtos para Melão:", nrow(produtos_melao), "\n")
View(produtos_melao)
todos
dados
View(dados)
View(produtos_melancia)
df_expandido <- produtos_melancia %>%
unnest(indicacao_uso, keep_empty = TRUE) %>%
unnest(culturas, keep_empty = TRUE)
df_expandido <- produtos_melancia %>%
unnest(indicacao_uso, keep_empty = TRUE)
View(df_expandido)
df_expandido <- produtos_melancia %>%
unnest(indicacao_uso, keep_empty = TRUE) |>
unnest(nome, keep_empty = TRUE)
df_expandido <- produtos_melancia %>%
unnest(indicacao_uso, keep_empty = TRUE) |>
unnest(ingrediente_ativo_detalhado, keep_empty = TRUE)
View(df_expandido[[8]][[1]])
df_expandido <- df %>%
# Primeiro expande a lista indicacao_uso
unnest_longer(indicacao_uso, keep_empty = TRUE) %>%
# Expande o data.frame interno de ingrediente_ativo_detalhado
unnest_wider(ingrediente_ativo_detalhado, names_sep = "_") %>%
# Se houver outra lista dentro, como culturas
unnest_longer(culturas, keep_empty = TRUE)
df_expandido <- df %>%
# Primeiro expande a lista indicacao_uso
unnest_longer(indicacao_uso, keep_empty = TRUE) %>%
# Expande o data.frame interno de ingrediente_ativo_detalhado
unnest_wider(ingrediente_ativo_detalhado, names_sep = "_")
df_expandido <- produtos_melancia %>%
# Primeiro expande a lista indicacao_uso
unnest_longer(indicacao_uso, keep_empty = TRUE) %>%
# Expande o data.frame interno de ingrediente_ativo_detalhado
unnest_wider(ingrediente_ativo_detalhado, names_sep = "_")
View(df_expandido)
df_expandido <- produtos_melancia %>%
unnest(indicacao_uso, keep_empty = TRUE, names_repair = "unique") %>%
unnest(cultuingrediente_ativo_detalhadoras, keep_empty = TRUE, names_repair = "unique")
df_expandido <- produtos_melancia %>%
unnest(indicacao_uso, keep_empty = TRUE, names_repair = "unique") %>%
unnest(ingrediente_ativo_detalhado, keep_empty = TRUE, names_repair = "unique")
View(df_expandido)
df_expandido <- produtos_melancia %>%
# Primeiro expande a lista indicacao_uso
unnest_longer(indicacao_uso, keep_empty = TRUE) %>%
# Expande o data.frame interno de ingrediente_ativo_detalhado
unnest_longer(ingrediente_ativo_detalhado, keep_empty = TRUE)
View(df_expandido)
# ------------------------------------------------------------------
# DESCRIÇÃO DO CÓDIGO
# ------------------------------------------------------------------
descricao <- "
Este script em R conecta-se à API Agrofit da Embrapa para buscar
informações sobre produtos formulados registrados para uma determinada cultura.
1. Autenticação:
- Gera automaticamente um token de acesso (OAuth2) usando o método
'client_credentials', a partir do consumer key e consumer secret.
2. Busca de produtos:
- Consulta o endpoint '/search/produtos-formulados' filtrando
pela cultura desejada (ex.: 'melancia').
- Faz requisições paginadas até retornar todos os produtos disponíveis,
não apenas os 100 primeiros.
3. Manipulação dos dados:
- Converte o JSON retornado pela API em data frame.
- Junta todos os resultados de todas as páginas em um único data frame.
4. Visualização:
- Exibe as colunas mais relevantes, como numero_registro, marca_comercial,
titular_registro, classe_categoria_agronomica, formulacao,
classificacao_toxicologica, classificacao_ambiental e
produto_agricultura_organica.
"
# Exibir a descrição no console
cat(descricao)
# Carregando pacotes necessários
library(httr)      # Para requisições HTTP
library(jsonlite)  # Para manipulação de JSON
library(dplyr)     # Para manipulação de dados
library(purrr)     # Para trabalhar com listas e iteração
# -------------------------------
# 1. Função para gerar token automático
# -------------------------------
gerar_token <- function(consumer_key, consumer_secret) {
# POST para o endpoint de token da API Agrofit
# Utiliza client_credentials para gerar token de acesso
res <- POST(
url = "https://api.cnptia.embrapa.br/token",
body = list(grant_type = "client_credentials"), # tipo de autenticação
encode = "form",
add_headers(Authorization = paste(
"Basic",
base64enc::base64encode(charToRaw(paste0(consumer_key, ":", consumer_secret)))
))
)
# Verifica se a requisição foi bem sucedida
stop_for_status(res)
# Converte a resposta JSON para lista e retorna o access_token
conteudo <- content(res, as = "parsed", encoding = "UTF-8")
return(conteudo$access_token)
}
# Substitua pelos seus dados fornecidos pelo Agrofit
consumer_key <- "Q8ojjTsATpRfXBU3cVtTncx0U9oa"
consumer_secret <- "3rOsAGnEVXQulSUHTAcz0Zelbrca"
# Gera token para autenticação nas próximas requisições
token <- gerar_token(consumer_key, consumer_secret)
# -------------------------------
# 2. Função para buscar produtos por cultura
# -------------------------------
buscar_produtos_cultura <- function(cultura, token) {
base_url <- "https://api.cnptia.embrapa.br/agrofit/v1/search/produtos-formulados"
pagina <- 1        # Inicializa a primeira página
todos <- list()    # Lista para armazenar resultados de todas as páginas
repeat {
# Requisição GET para o endpoint de produtos formulados, filtrando pela cultura
res <- GET(
url = base_url,
query = list(cultura = cultura, page = pagina),
add_headers(Authorization = paste("Bearer", token))
)
# Se a requisição falhar, exibe aviso e encerra o loop
if (status_code(res) != 200) {
warning(paste("Erro na página", pagina))
break
}
# Converte a resposta JSON em dataframe
conteudo <- content(res, as = "text", encoding = "UTF-8")
dados <- fromJSON(conteudo, flatten = TRUE)
# Se não houver dados, encerra o loop
if (length(dados) == 0) break
# Adiciona os dados da página atual à lista de resultados
todos <- append(todos, list(as.data.frame(dados)))
# Se retornou menos de 100 registros, não há mais páginas
if (nrow(as.data.frame(dados)) < 100) break
# Avança para a próxima página
pagina <- pagina + 1
}
# Junta todos os resultados em um único data frame
bind_rows(todos)
}
# -------------------------------
# 3. Buscar produtos para a cultura MELANCIA
# -------------------------------
produtos_melancia <- buscar_produtos_cultura("melancia", token)
# Contar quantos produtos foram encontrados
num_produtos_melancia <- nrow(produtos_melancia)
# Exibir no console
cat("Número total de produtos formulados registrados para melancia:", num_produtos_melancia, "\n")
# -------------------------------
# 4. Visualizar algumas colunas principais
# -------------------------------
produtos_melancia %>%
select(numero_registro,
marca_comercial,
titular_registro,
classe_categoria_agronomica,
formulacao,
classificacao_toxicologica,
classificacao_ambiental,
produto_agricultura_organica) %>%
glimpse()
df_expandido <- produtos_melancia %>%
unnest(indicacao_uso, keep_empty = TRUE) |>
unnest(ingrediente_ativo_detalhado, keep_empty = TRUE)
library(tidyr)     # Para trabalhar com listas e iteração
# -------------------------------
# 3. Buscar produtos para a cultura MELANCIA
# -------------------------------
produtos_melancia <- buscar_produtos_cultura("melancia", token)
# Contar quantos produtos foram encontrados
num_produtos_melancia <- nrow(produtos_melancia)
# Exibir no console
cat("Número total de produtos formulados registrados para melancia:", num_produtos_melancia, "\n")
# -------------------------------
# 4. Visualizar algumas colunas principais
# -------------------------------
produtos_melancia %>%
select(numero_registro,
marca_comercial,
titular_registro,
classe_categoria_agronomica,
formulacao,
classificacao_toxicologica,
classificacao_ambiental,
produto_agricultura_organica) %>%
glimpse()
df_expandido <- produtos_melancia %>%
unnest(indicacao_uso, keep_empty = TRUE) |>
unnest(ingrediente_ativo_detalhado, keep_empty = TRUE)
df_expandido <- produtos_melancia %>%
unnest(indicacao_uso, keep_empty = TRUE, names_repair = "unique") %>%
unnest(ingrediente_ativo_detalhado, keep_empty = TRUE, names_repair = "unique")
df_expandido <- produtos_melancia %>%
# Primeiro expande a lista indicacao_uso
unnest_longer(indicacao_uso, keep_empty = TRUE) %>%
# Expande o data.frame interno de ingrediente_ativo_detalhado
unnest_longer(ingrediente_ativo_detalhado, keep_empty = TRUE)
View(df_expandido)
View(df_expandido)
df_expandido |>
filter(indicacao_uso=="Melancia")
df_expandido |>
filter(indicacao_uso$nome=="Melancia")
df_expandido |>
filter(indicacao_uso$cultura=="Melancia")
df_expandido |>
filter(indicacao_uso$cultura=="Melancia") |>
View()
df_expandido |>
filter(indicacao_uso$cultura=="Melancia") |>
filter(indicacao_uso$praga_nome_comum=="Mosca-branca") |>
View()
df_expandido <- produtos_melancia %>%
# Primeiro expande a lista indicacao_uso
unnest_longer(indicacao_uso, keep_empty = TRUE)
df_expandido |>
filter(indicacao_uso$cultura=="Melancia") |>
filter(indicacao_uso$praga_nome_comum=="Mosca-branca") |>
View()
View(df_expandido)
df_expandido |>
filter(indicacao_uso$cultura=="Melancia")
df_expandido |>
filter(indicacao_uso$cultura=="Melancia") |> View()
df_expandido |>
filter(indicacao_uso$cultura=="Melancia") |>
filter(indicacao_uso$praga_nome_comum=="Mosca-branca") |>
View()
# -------------------------------
# 4. Buscar produtos para a cultura MELÃO
# -------------------------------
produtos_melao <- buscar_produtos_cultura("melão", token)
# Contar quantos produtos foram encontrados
num_produtos_melao <- nrow(produtos_melao)
# Exibir no console
cat("Número total de produtos formulados registrados para melancia:", num_produtos_melao, "\n")
# Exibir no console
cat("Número total de produtos formulados registrados para melão:", num_produtos_melao, "\n")
# Exibir no console
cat("Número total de produtos formulados registrados para melancia:", num_produtos_melancia, "\n")
df_expandido_melao <- produtos_melao %>%
# Primeiro expande a lista indicacao_uso
unnest_longer(indicacao_uso, keep_empty = TRUE)
df_expandido_melao |>
filter(indicacao_uso$cultura=="Melão") |>
filter(indicacao_uso$praga_nome_comum=="Mosca-branca") |>
View()
df_expandido_melao |>
# filter(indicacao_uso$cultura=="Melão") |>
filter(indicacao_uso$praga_nome_comum=="Mosca-branca") |>
View()
-
produtos_expandido_melao <- produtos_melao %>%
# Primeiro expande a lista indicacao_uso
unnest_longer(indicacao_uso, keep_empty = TRUE)
produtos_expandido_melao <- produtos_melao %>%
# Primeiro expande a lista indicacao_uso
unnest_longer(indicacao_uso, keep_empty = TRUE)
produtos_expandido_melao |>
filter(indicacao_uso$cultura=="Melão") |>
filter(indicacao_uso$praga_nome_comum=="Mosca-branca") |>
View()
produtos_expandido_melao |>
filter(indicacao_uso$cultura=="Melão") |>
filter(indicacao_uso$praga_nome_comum=="Vaquinha") |>
View()
produtos_expandido_melao |>
filter(indicacao_uso$cultura=="Feijão") |>
filter(indicacao_uso$praga_nome_comum=="Vaquinha") |>
View()
# -------------------------------
# 4. Buscar produtos para a cultura MELÃO
# -------------------------------
produtos_melao <- buscar_produtos_cultura("feijão", token)
# Exibir no console
cat("Número total de produtos formulados registrados para melão:", num_produtos_melao, "\n")
produtos_expandido_melao <- produtos_melao %>%
# Primeiro expande a lista indicacao_uso
unnest_longer(indicacao_uso, keep_empty = TRUE)
produtos_expandido_melao |>
filter(indicacao_uso$cultura=="Feijão") |>
filter(indicacao_uso$praga_nome_comum=="Vaquinha") |>
View()
produtos_expandido_melao |>
filter(indicacao_uso$cultura=="Feijão") |>
filter(indicacao_uso$praga_nome_comum=="braquiaria") |>
View()
produtos_expandido_melao |>
filter(indicacao_uso$cultura=="Feijão") |>
filter(indicacao_uso$praga_nome_comum=="brachiaria") |>
View()
# -------------------------------
# 4. Buscar produtos para a cultura MELÃO
# -------------------------------
produtos_melao <- buscar_produtos_cultura("melão", token)
# Contar quantos produtos foram encontrados
num_produtos_melao <- nrow(produtos_melao)
# Exibir no console
cat("Número total de produtos formulados registrados para melão:", num_produtos_melao, "\n")
produtos_expandido_melao |>
filter(indicacao_uso$cultura=="Melão") |>
filter(indicacao_uso$praga_nome_comum=="mosca minadora") |>
View()
produtos_expandido_melao |>
filter(indicacao_uso$cultura=="Melão") |>
filter(indicacao_uso$praga_nome_comum=="mosca-minadora") |>
View()
produtos_expandido_melao |>
filter(indicacao_uso$cultura=="Melão") |>
filter(indicacao_uso$praga_nome_comum=="mosca") |>
View()
View(produtos_expandido_melao)
# -------------------------------
# 4. Buscar produtos para a cultura MELÃO
# -------------------------------
produtos_melao <- buscar_produtos_cultura("melão", token)
# Contar quantos produtos foram encontrados
num_produtos_melao <- nrow(produtos_melao)
produtos_expandido_melao <- produtos_melao %>%
# Primeiro expande a lista indicacao_uso
unnest_longer(indicacao_uso, keep_empty = TRUE)
produtos_expandido_melao |>
filter(indicacao_uso$cultura=="Melão") |>
filter(indicacao_uso$praga_nome_comum=="mosca") |>
View()
produtos_expandido_melao |>
filter(indicacao_uso$cultura=="Melão")
library(shiny); runApp('shinyapp_api_agrofit_v1.0_28082025.R')
# -------------------------------
# 1. Função para gerar token automático
# -------------------------------
gerar_token <- function(consumer_key, consumer_secret) {
res <- POST(
url = "https://api.cnptia.embrapa.br/token",
body = list(grant_type = "client_credentials"),
encode = "form",
add_headers(Authorization = paste(
"Basic",
base64encode(charToRaw(paste0(consumer_key, ":", consumer_secret)))
))
)
stop_for_status(res)
conteudo <- content(res, as = "parsed", encoding = "UTF-8")
return(conteudo$access_token)
}
# Substitua pelos seus dados
consumer_key <- "Q8ojjTsATpRfXBU3cVtTncx0U9oa"
consumer_secret <- "3rOsAGnEVXQulSUHTAcz0Zelbrca"
token <- gerar_token(consumer_key, consumer_secret)
# app.R
library(shiny)
library(httr)
library(jsonlite)
library(dplyr)
library(DT)
library(purrr)
library(base64enc)
# -------------------------------
# 1. Função para gerar token automático
# -------------------------------
gerar_token <- function(consumer_key, consumer_secret) {
res <- POST(
url = "https://api.cnptia.embrapa.br/token",
body = list(grant_type = "client_credentials"),
encode = "form",
add_headers(Authorization = paste(
"Basic",
base64encode(charToRaw(paste0(consumer_key, ":", consumer_secret)))
))
)
stop_for_status(res)
conteudo <- content(res, as = "parsed", encoding = "UTF-8")
return(conteudo$access_token)
}
# Substitua pelos seus dados
consumer_key <- "Q8ojjTsATpRfXBU3cVtTncx0U9oa"
consumer_secret <- "3rOsAGnEVXQulSUHTAcz0Zelbrca"
token <- gerar_token(consumer_key, consumer_secret)
# -------------------------------
# 2. Função para buscar produtos por cultura
# -------------------------------
buscar_produtos_cultura <- function(cultura, token) {
base_url <- "https://api.cnptia.embrapa.br/agrofit/v1/search/produtos-formulados"
pagina <- 1
todos <- list()
repeat {
res <- GET(
url = base_url,
query = list(cultura = cultura, page = pagina),
add_headers(Authorization = paste("Bearer", token))
)
if (status_code(res) != 200) {
warning(paste("Erro na página", pagina))
break
}
conteudo <- content(res, as = "text", encoding = "UTF-8")
dados <- fromJSON(conteudo, flatten = TRUE)
if (length(dados) == 0) break
todos <- append(todos, list(as.data.frame(dados)))
if (nrow(as.data.frame(dados)) < 100) break
pagina <- pagina + 1
}
bind_rows(todos)
}
# -------------------------------
# 3. Função para obter lista de culturas disponíveis
# -------------------------------
obter_culturas <- function(token) {
res <- GET(
url = "https://api.cnptia.embrapa.br/agrofit/v1/culturas",
add_headers(Authorization = paste("Bearer", token))
)
stop_for_status(res)
dados <- content(res, as = "text", encoding = "UTF-8")
df <- fromJSON(dados, flatten = TRUE)
return(df$nome)  # retorna vetor de nomes de culturas
}
# -------------------------------
# 4. UI do Shiny
# -------------------------------
ui <- fluidPage(
titlePanel("Produtos Formulados Agrofit"),
sidebarLayout(
sidebarPanel(
selectInput("cultura", "Selecione a Cultura:", choices = NULL),
actionButton("buscar", "Buscar Produtos")
),
mainPanel(
textOutput("total_produtos"),
DTOutput("tabela_produtos")
)
)
)
# -------------------------------
# 5. Server do Shiny
# -------------------------------
server <- function(input, output, session) {
# Preencher selectInput de culturas
updateSelectInput(session, "cultura", choices = obter_culturas(token))
# Objeto reativo para armazenar os produtos
produtos <- reactiveVal(data.frame())
# Evento para buscar produtos quando clicar no botão
observeEvent(input$buscar, {
req(input$cultura)
resultado <- buscar_produtos_cultura(input$cultura, token)
produtos(resultado)
})
# Exibir número total de produtos
output$total_produtos <- renderText({
req(produtos())
paste("Número total de produtos para", input$cultura, ":", nrow(produtos()))
})
# Exibir tabela interativa
output$tabela_produtos <- renderDT({
req(produtos())
produtos()
%>%
# -------------------------------
# 6. Rodar o Shiny App
# -------------------------------
shinyApp(ui = ui, server = server)
runApp('shinyapp_api_agrofit_v1.0_28082025.R')
runApp('shinyapp_api_agrofit_v1.0_28082025.R')
runApp('shinyapp_api_agrofit_v1.0_28082025.R')
unique(produtos_melao$marca_comercial)
unique(produtos_melao$marca_comercial) |>  as.list()
unique(produtos_melao$marca_comercial) |>  as.data.frame()
unique(produtos_melao$marca_comercial) |>  as.list.data.frame()
unique(produtos_melao$marca_comercial)
produtos_melao |> class()
setwd("~/Projetos R/site")
setwd("~/Projetos R/site")
setwd("~/Projetos R/site")
setwd("~/Projetos R/site")
setwd("~/Projetos R/site")
